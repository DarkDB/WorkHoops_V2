{"version":3,"file":"static/chunks/app/publicar/page-934b2b486031715e.js","mappings":"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","sources":["webpack://_N_E/?c12b","webpack://_N_E/../src/checkbox.tsx"],"sourcesContent":["import(/* webpackMode: \"eager\", webpackExports: [\"Navbar\"] */ \"/app/frontend/components/Navbar.tsx\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"Root\",\"Indicator\",\"displayName\"] */ \"/app/frontend/node_modules/@radix-ui/react-checkbox/dist/index.mjs\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"Root\",\"displayName\"] */ \"/app/frontend/node_modules/@radix-ui/react-label/dist/index.mjs\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"Root\",\"Group\",\"Value\",\"Trigger\",\"Icon\",\"displayName\",\"ScrollUpButton\",\"ScrollDownButton\",\"Portal\",\"Content\",\"Viewport\",\"Label\",\"Item\",\"ItemIndicator\",\"ItemText\",\"Separator\"] */ \"/app/frontend/node_modules/@radix-ui/react-select/dist/index.mjs\");\n;\nimport(/* webpackMode: \"eager\" */ \"/app/frontend/node_modules/next/dist/client/link.js\");\n","import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\nconst CHECKBOX_NAME = 'Checkbox';\n\ntype ScopedProps<P> = P & { __scopeCheckbox?: Scope };\nconst [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);\n\ntype CheckedState = boolean | 'indeterminate';\n\ntype CheckboxContextValue<State extends CheckedState | boolean = CheckedState> = {\n  checked: State | boolean;\n  setChecked: React.Dispatch<React.SetStateAction<State | boolean>>;\n  disabled: boolean | undefined;\n  control: HTMLButtonElement | null;\n  setControl: React.Dispatch<React.SetStateAction<HTMLButtonElement | null>>;\n  name: string | undefined;\n  form: string | undefined;\n  value: string | number | readonly string[];\n  hasConsumerStoppedPropagationRef: React.RefObject<boolean>;\n  required: boolean | undefined;\n  defaultChecked: boolean | undefined;\n  isFormControl: boolean;\n  bubbleInput: HTMLInputElement | null;\n  setBubbleInput: React.Dispatch<React.SetStateAction<HTMLInputElement | null>>;\n};\n\nconst [CheckboxProviderImpl, useCheckboxContext] =\n  createCheckboxContext<CheckboxContextValue>(CHECKBOX_NAME);\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CheckboxProviderProps<State extends CheckedState = CheckedState> {\n  checked?: State | boolean;\n  defaultChecked?: State | boolean;\n  required?: boolean;\n  onCheckedChange?(checked: State | boolean): void;\n  name?: string;\n  form?: string;\n  disabled?: boolean;\n  value?: string | number | readonly string[];\n  children?: React.ReactNode;\n}\n\nfunction CheckboxProvider<State extends CheckedState = CheckedState>(\n  props: ScopedProps<CheckboxProviderProps<State>>\n) {\n  const {\n    __scopeCheckbox,\n    checked: checkedProp,\n    children,\n    defaultChecked,\n    disabled,\n    form,\n    name,\n    onCheckedChange,\n    required,\n    value = 'on',\n    // @ts-expect-error\n    internal_do_not_use_render,\n  } = props;\n\n  const [checked, setChecked] = useControllableState({\n    prop: checkedProp,\n    defaultProp: defaultChecked ?? false,\n    onChange: onCheckedChange,\n    caller: CHECKBOX_NAME,\n  });\n  const [control, setControl] = React.useState<HTMLButtonElement | null>(null);\n  const [bubbleInput, setBubbleInput] = React.useState<HTMLInputElement | null>(null);\n  const hasConsumerStoppedPropagationRef = React.useRef(false);\n  const isFormControl = control\n    ? !!form || !!control.closest('form')\n    : // We set this to true by default so that events bubble to forms without JS (SSR)\n      true;\n\n  const context: CheckboxContextValue<State> = {\n    checked: checked,\n    disabled: disabled,\n    setChecked: setChecked,\n    control: control,\n    setControl: setControl,\n    name: name,\n    form: form,\n    value: value,\n    hasConsumerStoppedPropagationRef: hasConsumerStoppedPropagationRef,\n    required: required,\n    defaultChecked: isIndeterminate(defaultChecked) ? false : defaultChecked,\n    isFormControl: isFormControl,\n    bubbleInput,\n    setBubbleInput,\n  };\n\n  return (\n    <CheckboxProviderImpl\n      scope={__scopeCheckbox}\n      {...(context as unknown as CheckboxContextValue<CheckedState>)}\n    >\n      {isFunction(internal_do_not_use_render) ? internal_do_not_use_render(context) : children}\n    </CheckboxProviderImpl>\n  );\n}\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'CheckboxTrigger';\n\ninterface CheckboxTriggerProps\n  extends Omit<\n    React.ComponentPropsWithoutRef<typeof Primitive.button>,\n    keyof CheckboxProviderProps\n  > {\n  children?: React.ReactNode;\n}\n\nconst CheckboxTrigger = React.forwardRef<HTMLButtonElement, CheckboxTriggerProps>(\n  (\n    { __scopeCheckbox, onKeyDown, onClick, ...checkboxProps }: ScopedProps<CheckboxTriggerProps>,\n    forwardedRef\n  ) => {\n    const {\n      control,\n      value,\n      disabled,\n      checked,\n      required,\n      setControl,\n      setChecked,\n      hasConsumerStoppedPropagationRef,\n      isFormControl,\n      bubbleInput,\n    } = useCheckboxContext(TRIGGER_NAME, __scopeCheckbox);\n    const composedRefs = useComposedRefs(forwardedRef, setControl);\n\n    const initialCheckedStateRef = React.useRef(checked);\n    React.useEffect(() => {\n      const form = control?.form;\n      if (form) {\n        const reset = () => setChecked(initialCheckedStateRef.current);\n        form.addEventListener('reset', reset);\n        return () => form.removeEventListener('reset', reset);\n      }\n    }, [control, setChecked]);\n\n    return (\n      <Primitive.button\n        type=\"button\"\n        role=\"checkbox\"\n        aria-checked={isIndeterminate(checked) ? 'mixed' : checked}\n        aria-required={required}\n        data-state={getState(checked)}\n        data-disabled={disabled ? '' : undefined}\n        disabled={disabled}\n        value={value}\n        {...checkboxProps}\n        ref={composedRefs}\n        onKeyDown={composeEventHandlers(onKeyDown, (event) => {\n          // According to WAI ARIA, Checkboxes don't activate on enter keypress\n          if (event.key === 'Enter') event.preventDefault();\n        })}\n        onClick={composeEventHandlers(onClick, (event) => {\n          setChecked((prevChecked) => (isIndeterminate(prevChecked) ? true : !prevChecked));\n          if (bubbleInput && isFormControl) {\n            hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n            // if checkbox has a bubble input and is a form control, stop\n            // propagation from the button so that we only propagate one click\n            // event (from the input). We propagate changes from an input so\n            // that native form validation works and form events reflect\n            // checkbox updates.\n            if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n          }\n        })}\n      />\n    );\n  }\n);\n\nCheckboxTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Checkbox\n * -----------------------------------------------------------------------------------------------*/\n\ntype CheckboxElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CheckboxProps extends Omit<PrimitiveButtonProps, 'checked' | 'defaultChecked'> {\n  checked?: CheckedState;\n  defaultChecked?: CheckedState;\n  required?: boolean;\n  onCheckedChange?(checked: CheckedState): void;\n}\n\nconst Checkbox = React.forwardRef<CheckboxElement, CheckboxProps>(\n  (props: ScopedProps<CheckboxProps>, forwardedRef) => {\n    const {\n      __scopeCheckbox,\n      name,\n      checked,\n      defaultChecked,\n      required,\n      disabled,\n      value,\n      onCheckedChange,\n      form,\n      ...checkboxProps\n    } = props;\n\n    return (\n      <CheckboxProvider\n        __scopeCheckbox={__scopeCheckbox}\n        checked={checked}\n        defaultChecked={defaultChecked}\n        disabled={disabled}\n        required={required}\n        onCheckedChange={onCheckedChange}\n        name={name}\n        form={form}\n        value={value}\n        // @ts-expect-error\n        internal_do_not_use_render={({ isFormControl }: CheckboxContextValue) => (\n          <>\n            <CheckboxTrigger\n              {...checkboxProps}\n              ref={forwardedRef}\n              // @ts-expect-error\n              __scopeCheckbox={__scopeCheckbox}\n            />\n            {isFormControl && (\n              <CheckboxBubbleInput\n                // @ts-expect-error\n                __scopeCheckbox={__scopeCheckbox}\n              />\n            )}\n          </>\n        )}\n      />\n    );\n  }\n);\n\nCheckbox.displayName = CHECKBOX_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'CheckboxIndicator';\n\ntype CheckboxIndicatorElement = React.ComponentRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface CheckboxIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CheckboxIndicator = React.forwardRef<CheckboxIndicatorElement, CheckboxIndicatorProps>(\n  (props: ScopedProps<CheckboxIndicatorProps>, forwardedRef) => {\n    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;\n    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);\n    return (\n      <Presence\n        present={forceMount || isIndeterminate(context.checked) || context.checked === true}\n      >\n        <Primitive.span\n          data-state={getState(context.checked)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n          style={{ pointerEvents: 'none', ...props.style }}\n        />\n      </Presence>\n    );\n  }\n);\n\nCheckboxIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxBubbleInput\n * -----------------------------------------------------------------------------------------------*/\n\nconst BUBBLE_INPUT_NAME = 'CheckboxBubbleInput';\n\ntype InputProps = React.ComponentPropsWithoutRef<typeof Primitive.input>;\ninterface CheckboxBubbleInputProps extends Omit<InputProps, 'checked'> {}\n\nconst CheckboxBubbleInput = React.forwardRef<HTMLInputElement, CheckboxBubbleInputProps>(\n  ({ __scopeCheckbox, ...props }: ScopedProps<CheckboxBubbleInputProps>, forwardedRef) => {\n    const {\n      control,\n      hasConsumerStoppedPropagationRef,\n      checked,\n      defaultChecked,\n      required,\n      disabled,\n      name,\n      value,\n      form,\n      bubbleInput,\n      setBubbleInput,\n    } = useCheckboxContext(BUBBLE_INPUT_NAME, __scopeCheckbox);\n\n    const composedRefs = useComposedRefs(forwardedRef, setBubbleInput);\n    const prevChecked = usePrevious(checked);\n    const controlSize = useSize(control);\n\n    // Bubble checked change to parents (e.g form change event)\n    React.useEffect(() => {\n      const input = bubbleInput;\n      if (!input) return;\n\n      const inputProto = window.HTMLInputElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        inputProto,\n        'checked'\n      ) as PropertyDescriptor;\n      const setChecked = descriptor.set;\n\n      const bubbles = !hasConsumerStoppedPropagationRef.current;\n      if (prevChecked !== checked && setChecked) {\n        const event = new Event('click', { bubbles });\n        input.indeterminate = isIndeterminate(checked);\n        setChecked.call(input, isIndeterminate(checked) ? false : checked);\n        input.dispatchEvent(event);\n      }\n    }, [bubbleInput, prevChecked, checked, hasConsumerStoppedPropagationRef]);\n\n    const defaultCheckedRef = React.useRef(isIndeterminate(checked) ? false : checked);\n    return (\n      <Primitive.input\n        type=\"checkbox\"\n        aria-hidden\n        defaultChecked={defaultChecked ?? defaultCheckedRef.current}\n        required={required}\n        disabled={disabled}\n        name={name}\n        value={value}\n        form={form}\n        {...props}\n        tabIndex={-1}\n        ref={composedRefs}\n        style={{\n          ...props.style,\n          ...controlSize,\n          position: 'absolute',\n          pointerEvents: 'none',\n          opacity: 0,\n          margin: 0,\n          // We transform because the input is absolutely positioned but we have\n          // rendered it **after** the button. This pulls it back to sit on top\n          // of the button.\n          transform: 'translateX(-100%)',\n        }}\n      />\n    );\n  }\n);\n\nCheckboxBubbleInput.displayName = BUBBLE_INPUT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction isFunction(value: unknown): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n\nfunction isIndeterminate(checked?: CheckedState): checked is 'indeterminate' {\n  return checked === 'indeterminate';\n}\n\nfunction getState(checked: CheckedState) {\n  return isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';\n}\n\nexport {\n  createCheckboxScope,\n  //\n  Checkbox,\n  CheckboxProvider,\n  CheckboxTrigger,\n  CheckboxIndicator,\n  CheckboxBubbleInput,\n  //\n  Checkbox as Root,\n  CheckboxProvider as Provider,\n  CheckboxTrigger as Trigger,\n  CheckboxIndicator as Indicator,\n  CheckboxBubbleInput as BubbleInput,\n};\nexport type {\n  CheckboxProps,\n  CheckboxProviderProps,\n  CheckboxTriggerProps,\n  CheckboxIndicatorProps,\n  CheckboxBubbleInputProps,\n  CheckedState,\n};\n"],"names":["Promise","resolve","then","__webpack_require__","bind","t","CHECKBOX_NAME","createCheckboxContext","createCheckboxScope","createContextScope","CheckboxProviderImpl","useCheckboxContext","CheckboxProvider","props","__scopeCheckbox","checked","checkedProp","children","defaultChecked","disabled","form","name","onCheckedChange","required","value","internal_do_not_use_render","setChecked","useControllableState","prop","defaultProp","onChange","caller","control","setControl","React","bubbleInput","setBubbleInput","hasConsumerStoppedPropagationRef","isFormControl","closest","context","isIndeterminate","jsx","scope","isFunction","TRIGGER_NAME","CheckboxTrigger","param","forwardedRef","onKeyDown","onClick","checkboxProps","composedRefs","useComposedRefs","initialCheckedStateRef","reset","current","addEventListener","removeEventListener","Primitive","button","type","role","getState","ref","composeEventHandlers","event","key","preventDefault","prevChecked","isPropagationStopped","stopPropagation","displayName","Checkbox","jsxs","Fragment","CheckboxBubbleInput","INDICATOR_NAME","CheckboxIndicator","forceMount","indicatorProps","Presence","present","span","style","pointerEvents","BUBBLE_INPUT_NAME","usePrevious","controlSize","useSize","descriptor","getOwnPropertyDescriptor","window","HTMLInputElement","prototype","set","bubbles","Event","input","indeterminate","call","dispatchEvent","defaultCheckedRef","tabIndex","position","opacity","margin","transform"],"sourceRoot":""}