// This is your Prisma schema file for PostgreSQL production
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for PostgreSQL
enum UserRole {
  admin
  jugador
  entrenador  
  club
  agencia
}

enum OpportunityType {
  empleo
  prueba
  torneo
  clinica
  beca
  patrocinio
}

enum OpportunityStatus {
  borrador
  pendiente
  publicada
  cerrada
  cancelada
}

enum OpportunityLevel {
  amateur
  semi_profesional
  profesional
  cantera
}

enum Modality {
  presencial
  online
  mixta
}

enum ApplicationState {
  enviada
  en_revision
  aceptada
  rechazada
  finalizada
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          UserRole  @default(jugador)
  locale        String    @default("es")
  verified      Boolean   @default(false)
  
  // Plan information
  planType      String    @default("free_amateur") // free_amateur, pro_semipro, club_agencia, destacado
  planStart     DateTime?
  planEnd       DateTime?
  isActive      Boolean   @default(true)
  stripeCustomerId String?
  stripeSubscriptionId String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  organizations Organization[]
  opportunities Opportunity[]
  applications  Application[]
  favorites     Favorite[]
  auditLogs     AuditLog[]
  subscriptions Subscription[]
  talentProfile TalentProfile?
  coachProfile  CoachProfile?
  clubAgencyProfile ClubAgencyProfile?
  interestNotifications InterestNotification[]

  @@map("users")
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  website     String?
  logo        String?
  verified    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  owner         User          @relation(fields: [ownerId], references: [id])
  ownerId       String
  opportunities Opportunity[]

  @@map("organizations")
}

model Opportunity {
  id               String            @id @default(cuid())
  title            String
  slug             String            @unique
  description      String
  type             OpportunityType
  status           OpportunityStatus @default(borrador)
  level            OpportunityLevel

  // Location
  city      String?
  country   String   @default("España")
  latitude  Float?
  longitude Float?
  modality  Modality @default(presencial)

  // Remuneration
  remunerationType String? // hourly, monthly, annual, one_time
  remunerationMin  Float?
  remunerationMax  Float?
  currency         String  @default("EUR")

  // Details
  benefits    String?
  deadline    DateTime?
  startDate   DateTime?
  endDate     DateTime?
  publishedAt DateTime?
  tags        String?
  verified    Boolean @default(false)

  // Contact
  contactEmail String
  contactPhone String?
  applicationUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  authorId       String
  author         User          @relation(fields: [authorId], references: [id])
  applications   Application[]
  favorites      Favorite[]

  @@map("opportunities")
}

model Application {
  id        String           @id @default(cuid())
  state     ApplicationState @default(enviada)
  message   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@unique([userId, opportunityId])
  @@map("applications")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@unique([userId, opportunityId])
  @@map("favorites")
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String   // "created", "updated", "deleted", "applied", "state_changed"
  entity    String   // "opportunity", "application", "organization"
  entityId  String
  metadata  String?  // JSON as string
  createdAt DateTime @default(now())

  // Relations
  actor User @relation(fields: [actorId], references: [id])

  @@map("audit_logs")
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String
  stripeSubscriptionId String    @unique
  stripePriceId        String
  stripeCustomerId     String
  status               String    // active, canceled, past_due, etc.
  planType             String    // free_amateur, pro_semipro, club_agencia, destacado
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model TalentProfile {
  id          String   @id @default(cuid())
  fullName    String
  birthDate   DateTime
  role        String   // jugador, entrenador, staff
  city        String
  country     String   @default("España")
  
  // Sport specific (mainly for players)
  position    String?  // Base, Escolta, Alero, Ala-pívot, Pívot
  secondaryPosition String?
  height      Int?     // in cm
  weight      Int?     // in kg
  wingspan    Int?     // Envergadura en cm
  dominantHand String? // Derecha, Izquierda, Ambas
  
  // Career info
  currentLevel String? // Amateur, Semi-pro, Profesional
  lastTeam    String?
  currentCategory String?
  
  // Playing style (JSON array of selected styles)
  playingStyle String? // JSON: ["Playmaker", "Tirador", etc.]
  
  // Additional info
  languages   String? // JSON array
  willingToTravel Boolean @default(false)
  weeklyCommitment Int? // horas por semana
  internationalExperience Boolean @default(false)
  hasLicense  Boolean @default(false)
  injuryHistory String? // Opcional, texto libre
  currentGoal String? // Encontrar equipo, Mejorar nivel, etc.
  
  // Biography and links
  bio         String?
  videoUrl    String?  // YouTube/Vimeo highlights
  fullGameUrl String?  // Partido completo
  socialUrl   String?
  photoUrls   String?  // JSON array de URLs de fotos
  
  // Profile completion (para la barra de progreso)
  profileCompletionPercentage Int @default(0)
  
  // Profile status
  isPublic    Boolean  @default(true)
  verified    Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relation to skills
  playerSkills PlayerSkills?
  
  // Interest notifications
  interestNotifications InterestNotification[]
  
  @@map("talent_profiles")
}

model PlayerSkills {
  id                String   @id @default(cuid())
  talentProfileId   String   @unique
  
  // Habilidades ofensivas (1-5)
  threePointShot    Int @default(3) // Tiro exterior
  midRangeShot      Int @default(3) // Tiro media distancia
  finishing         Int @default(3) // Finalización en el aro
  ballHandling      Int @default(3) // Manejo de balón
  playmaking        Int @default(3) // Visión de juego / Asistencias
  offBallMovement   Int @default(3) // Juego sin balón
  
  // Habilidades defensivas (1-5)
  individualDefense Int @default(3) // Defensa individual
  teamDefense       Int @default(3) // Defensa en equipo
  offensiveRebound  Int @default(3) // Rebote ofensivo
  defensiveRebound  Int @default(3) // Rebote defensivo
  
  // Atributos físicos (1-5)
  speed             Int @default(3) // Velocidad / Agilidad
  athleticism       Int @default(3) // Capacidad atlética / Salto
  endurance         Int @default(3) // Resistencia física
  
  // Atributos mentales (1-5)
  leadership        Int @default(3) // Comunicación / Liderazgo
  decisionMaking    Int @default(3) // Toma de decisiones
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relation
  talentProfile     TalentProfile @relation(fields: [talentProfileId], references: [id], onDelete: Cascade)
  
  @@map("player_skills")
}

model CoachProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Datos Generales
  fullName              String
  birthYear             Int?
  nationality           String    @default("España")
  languages             String?   // JSON array
  city                  String
  willingToRelocate     Boolean   @default(false)
  currentLevel          String?   // Base / Amateur / Semi-pro / Profesional
  federativeLicense     String?   // Nivel 1, Nivel 2, Superior, etc.
  totalExperience       Int?      // años
  
  // Experiencia y Trayectoria
  currentClub           String?
  previousClubs         String?   // texto libre o JSON
  categoriesCoached     String?   // JSON array: Mini, Infantil, Junior, Senior, etc.
  achievements          String?   // texto libre
  internationalExp      Boolean   @default(false)
  internationalExpDesc  String?
  roleExperience        String?   // Asistente / Primer entrenador
  nationalTeamExp       Boolean   @default(false)
  
  // Skills Técnicas y Tácticas (1-5)
  trainingPlanning      Int       @default(3)
  individualDevelopment Int       @default(3)
  offensiveTactics      Int       @default(3)
  defensiveTactics      Int       @default(3)
  groupManagement       Int       @default(3)
  scoutingAnalysis      Int       @default(3)
  staffManagement       Int       @default(3)
  communication         Int       @default(3)
  tacticalAdaptability  Int       @default(3)
  digitalTools          Int       @default(3)
  physicalPreparation   Int       @default(3)
  youthDevelopment      Int       @default(3)
  
  // Filosofía y Estilo
  playingStyle          String?   // texto o JSON
  workPriority          String?   // Desarrollo / Resultados / Formación
  playerTypePreference  String?
  inspirations          String?
  
  // Formación
  academicDegrees       String?   // INEF, CAFD, etc.
  certifications        String?   // FIBA, FEB, etc.
  coursesAttended       String?
  
  // Objetivos
  currentGoal           String?
  offerType             String?   // Principal / Asistente / Formador
  availability          String?   // Temporada / Campus / Verano
  
  // Competencias Personales (1-5)
  leadership            Int       @default(3)
  teamwork              Int       @default(3)
  conflictResolution    Int       @default(3)
  organization          Int       @default(3)
  adaptability          Int       @default(3)
  innovation            Int       @default(3)
  
  // Multimedia
  videoUrl              String?
  presentationsUrl      String?
  photoUrls             String?   // JSON array
  
  // Meta
  bio                   String?
  isPublic              Boolean   @default(true)
  verified              Boolean   @default(false)
  profileCompletionPercentage Int @default(0)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@map("coach_profiles")
}

model ClubAgencyProfile {
  id                    String    @id @default(cuid())
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Perfil de la Entidad
  entityType            String    // club, agencia, academia, programa_universitario
  legalName             String
  commercialName        String?
  country               String    @default("España")
  province              String?
  city                  String
  website               String?
  instagramUrl          String?
  twitterUrl            String?
  linkedinUrl           String?
  youtubeUrl            String?
  
  competitions          String?   // JSON: ACB, LEB Oro, etc.
  sections              String?   // JSON: Masculina, Femenina, Formación
  foundedYear           Int?
  rosterSize            Int?      // número de jugadores
  staffSize             Int?      // número de staff
  workingLanguages      String?   // JSON array
  
  // Contacto
  contactPerson         String?
  contactRole           String?
  contactEmail          String?
  contactPhone          String?
  fiscalDocument        String?   // CIF/NIF/VAT (opcional)
  contactPreference     String?   // email, whatsapp, phone, portal
  
  // Necesidades y Criterios de Fichaje
  profilesNeeded        String?   // JSON: Base, Escolta, Entrenador, etc.
  ageRangeMin           Int?
  ageRangeMax           Int?
  minHeightByPosition   String?   // JSON object
  experienceRequired    String?   // Amateur, Semi-pro, Profesional
  competitiveReqs       String?   // texto libre
  keySkills             String?   // JSON: tirador, defensor, etc.
  availabilityNeeded    String?   // inmediata, próxima ventana, etc.
  
  // Condiciones Ofrecidas
  salaryRange           String?   // Opcional
  housingProvided       Boolean   @default(false)
  mealsTransport        Boolean   @default(false)
  medicalInsurance      Boolean   @default(false)
  contractType          String?   // profesional, beca, amateur
  visaSupport           Boolean   @default(false)
  requiredDocs          String?   // texto o JSON
  agentPolicy           String?   // acepta, no acepta, indiferente
  scoutingNotes         String?   // texto libre
  
  // Verificación y Multimedia
  logo                  String?
  facilityPhotos        String?   // JSON array de URLs
  institutionalVideo    String?
  verified              Boolean   @default(false)
  showEmailPublic       Boolean   @default(false)
  showPhonePublic       Boolean   @default(false)
  candidatesViaPortal   Boolean   @default(true)
  
  // Meta
  description           String?
  isPublic              Boolean   @default(true)
  profileCompletionPercentage Int @default(0)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@map("club_agency_profiles")
}

model InterestNotification {
  id                String    @id @default(cuid())
  profileId         String
  interestedUserId  String
  message           String?
  status            String    @default("pending") // pending, read, responded
  createdAt         DateTime  @default(now())
  
  // Relations
  talentProfile     TalentProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  interestedUser    User          @relation(fields: [interestedUserId], references: [id], onDelete: Cascade)
  
  @@index([profileId])
  @@index([interestedUserId])
  @@index([status])
  @@index([createdAt])
  @@map("interest_notifications")
}