// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  jugador
  entrenador
  club
  admin
}

enum PlanType {
  free_amateur
  pro_semipro
  club_agencia
  destacado
}

enum OpportunityType {
  empleo
  prueba
  torneo
  clinica
  beca
  patrocinio
}

enum OpportunityStatus {
  borrador
  pendiente
  publicada
  cerrada
}

enum OpportunityLevel {
  amateur
  semi_pro
  cantera
  pro
}

enum Modality {
  presencial
  online
  mixta
}

enum ApplicationState {
  enviada
  vista
  rechazada
  aceptada
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          UserRole  @default(user)
  locale        String    @default("es")
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  organizations Organization[]
  opportunities Opportunity[]
  applications  Application[]
  favorites     Favorite[]
  auditLogs     AuditLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Organization {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  ownerId      String
  logoUrl      String?
  bio          String?
  verified     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  owner         User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  opportunities Opportunity[]

  @@index([slug])
  @@index([ownerId])
  @@map("organizations")
}

model Opportunity {
  id             String            @id @default(cuid())
  slug           String            @unique
  title          String
  type           OpportunityType
  organizationId String
  status         OpportunityStatus @default(borrador)
  level          OpportunityLevel
  city           String
  region         String?
  country        String            @default("Espa√±a")
  lat            Float?
  lng            Float?
  modality       Modality          @default(presencial)
  remuneration   Json?             // { min: number, max: number, currency: string, type: 'monthly'|'annual'|'per_event' }
  benefits       String?           // Markdown
  description    String            // Markdown
  requirements   String?           // Markdown
  deadline       DateTime?
  publishedAt    DateTime?
  tags           String[]
  verified       Boolean           @default(false)
  featured       Boolean           @default(false)
  createdBy      String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator      User          @relation(fields: [createdBy], references: [id])
  applications Application[]
  favorites    Favorite[]

  @@index([slug])
  @@index([status, publishedAt])
  @@index([type, level])
  @@index([city, country])
  @@index([organizationId])
  @@index([createdBy])
  @@map("opportunities")
}

model Application {
  id            String           @id @default(cuid())
  userId        String
  opportunityId String
  state         ApplicationState @default(enviada)
  message       String?
  cvUrl         String?
  portfolioUrl  String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  @@unique([userId, opportunityId])
  @@index([userId])
  @@index([opportunityId])
  @@index([state])
  @@map("applications")
}

model Favorite {
  userId        String
  opportunityId String
  createdAt     DateTime @default(now())

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  @@id([userId, opportunityId])
  @@map("favorites")
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String   // "created", "updated", "deleted", "applied", "state_changed"
  entity    String   // "opportunity", "application", "organization"
  entityId  String
  metadata  Json?    // Additional context
  createdAt DateTime @default(now())

  // Relations
  actor User @relation(fields: [actorId], references: [id])

  @@index([actorId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}